import { body, query, param, validationResult } from 'express-validator';
import { ApiError } from '../utils/ApiError.js';

// Validation middleware
const validate = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    const errorMessages = errors.array().map(error => ({
      field: error.path,
      message: error.msg
    }));
    throw ApiError.validationError('Validation failed', errorMessages);
  }
  next();
};

// Severity enum values
const SEVERITY_VALUES = ['critical', 'high', 'medium', 'low', 'informational'];
const STATUS_VALUES = ['active', 'resolved', 'false_positive', 'accepted_risk'];

export const validateGetVulnerabilities = [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('Page must be a positive integer'),
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('Limit must be between 1 and 100'),
  query('severity')
    .optional()
    .isIn(SEVERITY_VALUES)
    .withMessage(`Severity must be one of: ${SEVERITY_VALUES.join(', ')}`),
  query('status')
    .optional()
    .isIn(STATUS_VALUES)
    .withMessage(`Status must be one of: ${STATUS_VALUES.join(', ')}`),
  query('type')
    .optional()
    .isString()
    .trim()
    .notEmpty()
    .withMessage('Type must be a non-empty string'),
  query('scanId')
    .optional()
    .isMongoId()
    .withMessage('Invalid scan ID'),
  query('ruleId')
    .optional()
    .isMongoId()
    .withMessage('Invalid rule ID'),
  query('sortBy')
    .optional()
    .isIn(['createdAt', 'severity', 'status', 'type', 'updatedAt'])
    .withMessage('Invalid sort field'),
  query('order')
    .optional()
    .isIn(['asc', 'desc'])
    .withMessage('Order must be either asc or desc'),
  validate
];

export const validateCreateVulnerability = [
  body('scanId')
    .notEmpty()
    .withMessage('Scan ID is required')
    .isMongoId()
    .withMessage('Invalid scan ID'),
  body('ruleId')
    .notEmpty()
    .withMessage('Rule ID is required')
    .isMongoId()
    .withMessage('Invalid rule ID'),
  body('requestId')
    .notEmpty()
    .withMessage('Request ID is required')
    .isMongoId()
    .withMessage('Invalid request ID'),
  body('title')
    .notEmpty()
    .withMessage('Title is required')
    .isString()
    .trim()
    .isLength({ min: 5, max: 200 })
    .withMessage('Title must be between 5 and 200 characters'),
  body('type')
    .notEmpty()
    .withMessage('Type is required')
    .isString()
    .trim(),
  body('severity')
    .notEmpty()
    .withMessage('Severity is required')
    .isIn(SEVERITY_VALUES)
    .withMessage(`Severity must be one of: ${SEVERITY_VALUES.join(', ')}`),
  body('description')
    .notEmpty()
    .withMessage('Description is required')
    .isString()
    .trim()
    .isLength({ min: 10 })
    .withMessage('Description must be at least 10 characters'),
  body('evidence')
    .notEmpty()
    .withMessage('Evidence is required')
    .isObject()
    .withMessage('Evidence must be an object'),
  body('evidence.request')
    .notEmpty()
    .withMessage('Evidence request is required'),
  body('evidence.response')
    .notEmpty()
    .withMessage('Evidence response is required'),
  body('evidence.matchedCriteria')
    .notEmpty()
    .withMessage('Matched criteria is required'),
  validate
];

export const validateUpdateVulnerability = [
  param('id')
    .isMongoId()
    .withMessage('Invalid vulnerability ID'),
  body('status')
    .optional()
    .isIn(STATUS_VALUES)
    .withMessage(`Status must be one of: ${STATUS_VALUES.join(', ')}`),
  body('severity')
    .optional()
    .isIn(SEVERITY_VALUES)
    .withMessage(`Severity must be one of: ${SEVERITY_VALUES.join(', ')}`),
  body('title')
    .optional()
    .isString()
    .trim()
    .isLength({ min: 5, max: 200 })
    .withMessage('Title must be between 5 and 200 characters'),
  body('description')
    .optional()
    .isString()
    .trim()
    .isLength({ min: 10 })
    .withMessage('Description must be at least 10 characters'),
  body('impact')
    .optional()
    .isString()
    .trim(),
  body('remediation')
    .optional()
    .isString()
    .trim(),
  body('cwe')
    .optional()
    .matches(/^CWE-\d+$/)
    .withMessage('CWE must be in format CWE-XXX'),
  body('owasp')
    .optional()
    .isString()
    .trim(),
  body('cvss.score')
    .optional()
    .isFloat({ min: 0, max: 10 })
    .withMessage('CVSS score must be between 0 and 10'),
  body('cvss.vector')
    .optional()
    .isString()
    .trim(),
  body('externalReferences')
    .optional()
    .isArray()
    .withMessage('External references must be an array'),
  body('externalReferences.*.type')
    .optional()
    .isIn(['jira', 'github', 'custom'])
    .withMessage('Reference type must be one of: jira, github, custom'),
  body('externalReferences.*.id')
    .optional()
    .isString()
    .trim()
    .notEmpty()
    .withMessage('Reference ID is required'),
  body('externalReferences.*.url')
    .optional()
    .isURL()
    .withMessage('Reference URL must be valid'),
  validate
];

export const validateAddNote = [
  param('id')
    .isMongoId()
    .withMessage('Invalid vulnerability ID'),
  body('text')
    .notEmpty()
    .withMessage('Note text is required')
    .isString()
    .trim()
    .isLength({ min: 1, max: 1000 })
    .withMessage('Note must be between 1 and 1000 characters'),
  validate
];

export const validateMarkFalsePositive = [
  param('id')
    .isMongoId()
    .withMessage('Invalid vulnerability ID'),
  body('reason')
    .notEmpty()
    .withMessage('Reason is required')
    .isString()
    .trim()
    .isLength({ min: 10, max: 500 })
    .withMessage('Reason must be between 10 and 500 characters'),
  validate
];

export const validateResolveVulnerability = [
  param('id')
    .isMongoId()
    .withMessage('Invalid vulnerability ID'),
  body('notes')
    .optional()
    .isString()
    .trim()
    .isLength({ max: 1000 })
    .withMessage('Notes must not exceed 1000 characters'),
  validate
];

export const validateExportVulnerabilities = [
  query('format')
    .optional()
    .isIn(['json', 'csv'])
    .withMessage('Format must be either json or csv'),
  query('scanId')
    .optional()
    .isMongoId()
    .withMessage('Invalid scan ID'),
  query('severity')
    .optional()
    .isIn(SEVERITY_VALUES)
    .withMessage(`Severity must be one of: ${SEVERITY_VALUES.join(', ')}`),
  query('status')
    .optional()
    .isIn(STATUS_VALUES)
    .withMessage(`Status must be one of: ${STATUS_VALUES.join(', ')}`),
  validate
];